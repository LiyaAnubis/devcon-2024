
#Область ПрограммныйИнтерфейс

// Выгрузить повторно номенклатуру, которая была передана ранее.
Процедура ВыгрузитьПовторноНоменклатуру() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЛКК_ВыгруженнаяНоменклатура.Номенклатура
		|ИЗ
		|	РегистрСведений.ЛКК_ВыгруженнаяНоменклатура КАК ЛКК_ВыгруженнаяНоменклатура";
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокНоменклатуры = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		СписокНоменклатуры.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	
	ОтправитьВыбраннуюНоменклатуру(СписокНоменклатуры);
	
КонецПроцедуры

// Отправить выбранную номенклатуру.
// 
// Параметры:
//  СписокНоменклатуры - Массив из СправочникСсылка.Номенклатура - Список номенклатуры
Процедура ОтправитьВыбраннуюНоменклатуру(СписокНоменклатуры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Ссылка,
		|	СправочникНоменклатура.Наименование КАК Наименование,
		|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, Номенклатура В (&СписокНоменклатуры)
		|		И ВидЦен = &ВидЦены
		|		И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)) КАК ЦеныНоменклатурыСрезПоследних
		|		ПО СправочникНоменклатура.Ссылка = ЦеныНоменклатурыСрезПоследних.Номенклатура
		|ГДЕ
		|	СправочникНоменклатура.Ссылка В (&СписокНоменклатуры)";
		
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("ВидЦены", Константы.ЛКК_ВидЦены.Получить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			СсылкаЛКК = Справочники.ЛКК_Номенклатура.ПолучитьСсылку(Выборка.Ссылка.УникальныйИдентификатор());
			
			ОбъектЛКК = СсылкаЛКК.ПолучитьОбъект();
			Если ОбъектЛКК = Неопределено Тогда
				ОбъектЛКК = Справочники.ЛКК_Номенклатура.СоздатьЭлемент();
				ОбъектЛКК.УстановитьСсылкуНового(СсылкаЛКК);
			КонецЕсли;
			
			ОбъектЛКК.Наименование = Выборка.Наименование;
			ОбъектЛКК.Цена = Выборка.Цена;
			ОбъектЛКК.Записать();
			
		КонецЦикла;
		
		НаборЗаписей = РегистрыСведений.ЛКК_ВыгруженнаяНоменклатура.СоздатьНаборЗаписей();
		
		Для Каждого Номенклатура Из СписокНоменклатуры Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Номенклатура = Номенклатура;
		КонецЦикла;
		
		НаборЗаписей.Записать(РежимЗамещения.Слияние);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Добавить контрагента в личный кабинет.
// 
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент
Процедура ДобавитьКонтрагентаВЛичныйКабинет(Контрагент) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		СсылкаЛКК = Справочники.ЛКК_Организации.ПолучитьСсылку(Контрагент.УникальныйИдентификатор());
		
		Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "Наименование");
		
		ОбъектЛКК = СсылкаЛКК.ПолучитьОбъект();
		Если ОбъектЛКК = Неопределено Тогда
			ОбъектЛКК = Справочники.ЛКК_Организации.СоздатьЭлемент();
			ОбъектЛКК.УстановитьСсылкуНового(СсылкаЛКК);
		КонецЕсли;
		
		ОбъектЛКК.Наименование = Наименование;
		ОбъектЛКК.Записать();
		
		Запись = РегистрыСведений.ЛКК_ВыгруженныеКонтрагенты.СоздатьМенеджерЗаписи();
		Запись.Контрагент = Контрагент;
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Добавить представителя в личный кабинет.
// 
// Параметры:
//  Контрагент - СправочникСсылка.Контрагенты - Контрагент
//  НастройкиСоздания - Структура - Настройки создания:
//  	* КонтактноеЛицо - СправочникСсылка.КонтактныеЛица
//  	* Пароль - Строка
//
Процедура ДобавитьПредставителяВЛичныйКабинет(Контрагент, НастройкиСоздания) Экспорт
	
	КонтактноеЛицо = НастройкиСоздания.КонтактноеЛицо;
	Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Наименование");
	
	КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(КонтактноеЛицо,,, Ложь);
	
	АдресЭлектроннойПочты = "";
	Телефон = "";
	
	Для Каждого Строка Из КонтактнаяИнформация Цикл
		Если Строка.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица Тогда
			АдресЭлектроннойПочты = Строка.Представление;
		ИначеЕсли Строка.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
			Телефон = Строка.Представление;
		КонецЕсли;		
	КонецЦикла;
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(АдресЭлектроннойПочты) Тогда
		ОбщегоНазначения.СообщитьПользователю("У представителя должен быть заполнен адрес электронной почты",,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Телефон) Тогда
		ОбщегоНазначения.СообщитьПользователю("У представителя должен быть заполнен телефон",,,, Отказ);
	КонецЕсли;
	
	Телефон = "+" + СтрЗаменитьПоРегулярномуВыражению(Телефон, "[^0-9]", "");
	
	Если СтрДлина(Телефон) <> 12 Тогда
		ОбщегоНазначения.СообщитьПользователю("Некорректный номер телефона у выбранного представителя",,,, Отказ);
	КонецЕсли;		
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запись = РегистрыСведений.ЛКК_ВыгруженныеКонтактныеЛица.СоздатьМенеджерЗаписи();
	Запись.КонтактноеЛицо = КонтактноеЛицо;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		СсылкаЛКК = Справочники.ЛКК_Представители.ПолучитьСсылку(КонтактноеЛицо.УникальныйИдентификатор());
		
		ОбъектЛКК = СсылкаЛКК.ПолучитьОбъект();
		Если ОбъектЛКК = Неопределено Тогда
			ОбъектЛКК = Справочники.ЛКК_Представители.СоздатьЭлемент();
			ОбъектЛКК.УстановитьСсылкуНового(СсылкаЛКК);
		КонецЕсли;
		
		ОбъектЛКК.Наименование = Наименование;
		ОбъектЛКК.Телефон = Телефон;
		ОбъектЛКК.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
		ОбъектЛКК.ПервыйПароль = НастройкиСоздания.Пароль;
		ОбъектЛКК.Записать();
		
		ОрганизацияЛКК = Справочники.ЛКК_Организации.ПолучитьСсылку(Контрагент.УникальныйИдентификатор());
		ОбъектОрганизацияЛКК = ОрганизацияЛКК.ПолучитьОбъект();
		
		Если ОбъектОрганизацияЛКК = Неопределено Тогда
			ВызватьИсключение "Для выбранного контрагента не создан образ для личного кабинета";
		КонецЕсли;
		
		ОбъектОрганизацияЛКК.Представители.Добавить().Представитель = ОбъектЛКК.Ссылка;
		ОбъектОрганизацияЛКК.Записать();
		
		Запись = РегистрыСведений.ЛКК_ВыгруженныеКонтактныеЛица.СоздатьМенеджерЗаписи();
		Запись.КонтактноеЛицо = КонтактноеЛицо;
		Запись.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверить подключение.
// 
// Возвращаемое значение:
//  Строка - Результат проверки подключения
Функция ПроверитьПодключение() Экспорт
	
	ДополнительныйПуть = "ping";
	
	Ответ = ВыполнитьЗапросGET(ДополнительныйПуть, Ложь);
	
	Если Ответ.КодСостояния = 200 Тогда
		Возврат "Соединение проверено успешно";
	Иначе
		Возврат СтрШаблон("Ошибка проверки соединения, код состояния: %1", Ответ.КодСостояния);
	КонецЕсли;
	
КонецФункции

Функция НовыеНастройкиОбмена() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("РежимОтладки", Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьОбмен(НастройкиОбмена) Экспорт
	
	РезультатОбмена = Новый Структура;
	РезультатОбмена.Вставить("Успех", Истина);
	РезультатОбмена.Вставить("ТекстОшибки", "");
	РезультатОбмена.Вставить("ПодробныйТекстОшибки", "");
	РезультатОбмена.Вставить("ИсходящееСообщение", "");
	РезультатОбмена.Вставить("ВходящееСообщение", "");
	
	УзелЛКК = УзелЛКК();
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	Запись.ЗаписатьОбъявлениеXML();
	
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(Запись, УзелЛКК);
	
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
	
	Пока ВыборкаИзменений.Следующий() Цикл
		Данные = ВыборкаИзменений.Получить();
		ЗаписатьXML(Запись, Данные);
	КонецЦикла;
	
	ЗаписьСообщения.ЗакончитьЗапись();
	
	РезультатОбмена.ИсходящееСообщение = Запись.Закрыть();
	
	ДополнительныйПуть = "exchangeData";
	
	Ответ = ВыполнитьЗапросPOST(ДополнительныйПуть, РезультатОбмена.ИсходящееСообщение);
	
	Если Ответ.КодСостояния <> 200 Тогда
		РезультатОбмена.ПодробныйТекстОшибки = Ответ.ПолучитьТелоКакСтроку();
		РезультатОбмена.ТекстОшибки = СтрШаблон("Ошибка вызова метода отправи данных, код состояния: %1", Ответ.КодСостояния);
		РезультатОбмена.Успех = Ложь;
		Возврат РезультатОбмена;
	КонецЕсли;
	
	Ответ = ВыполнитьЗапросGET(ДополнительныйПуть);
	
	Если Ответ.КодСостояния <> 200 Тогда
		РезультатОбмена.ПодробныйТекстОшибки = Ответ.ПолучитьТелоКакСтроку();
		РезультатОбмена.ТекстОшибки = СтрШаблон("Ошибка вызова метода получения данных, код состояния: %1", Ответ.КодСостояния);
		РезультатОбмена.Успех = Ложь;
		Возврат РезультатОбмена;
	КонецЕсли;
	
	РезультатОбмена.ВходящееСообщение = Ответ.ПолучитьТелоКакСтроку();
	
	// В личном кабинете для документа Номенклатура всегда является ссылкой на справочник. В УНФ может быть строка.
	// Добавляем явное определение типа в XML.
	РезультатОбмена.ВходящееСообщение = СтрЗаменить(РезультатОбмена.ВходящееСообщение,
		"<Номенклатура>",
		"<Номенклатура xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""CatalogRef.Номенклатура"">");
	
	ВидЦены = Константы.ЛКК_ВидЦены.Получить();
	
	Попытка
		Чтение = Новый ЧтениеXML;
		Чтение.УстановитьСтроку(РезультатОбмена.ВходящееСообщение);
		
		ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
		ЧтениеСообщения.НачатьЧтение(Чтение);
		
		Отправитель = ЧтениеСообщения.Отправитель;
		
		ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
		
		Пока ВозможностьЧтенияXML(Чтение) Цикл
			Данные = ПрочитатьXML(Чтение);
			ЗаписатьЗагруженныеДанные(Данные, Отправитель, ВидЦены);
		КонецЦикла;
		
		ЧтениеСообщения.ЗакончитьЧтение();
		
		Чтение.Закрыть();
		
	Исключение
		РезультатОбмена.ТекстОшибки = ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		РезультатОбмена.Успех = Ложь;
		Возврат РезультатОбмена;
	КонецПопытки;
	
	Возврат РезультатОбмена;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция УзелЛКК()
	
	ЭтотУзелОбъект = ПланыОбмена.ОбменУНФЛКК.ЭтотУзел().ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(ЭтотУзелОбъект.Код) Тогда
		ЭтотУзелОбъект.Код = "smb";
		ЭтотУзелОбъект.Наименование = "Управление нашей фирмой";
		ЭтотУзелОбъект.Записать();
	КонецЕсли;
	
	УзелЛКК = ПланыОбмена.ОбменУНФЛКК.НайтиПоКоду("lkk");
	Если Не ЗначениеЗаполнено(УзелЛКК) Тогда
		УзелЛККОбъект = ПланыОбмена.ОбменУНФЛКК.СоздатьУзел();
		УзелЛККОбъект.Код = "lkk";
		УзелЛККОбъект.Наименование = "Личный кабинет клиента";
		УзелЛККОбъект.Записать();
		УзелЛКК = УзелЛККОбъект.Ссылка;
		ВыполнитьПервичнуюРегистрацию(УзелЛКК);
	КонецЕсли;
	
	Возврат УзелЛКК;
	
КонецФункции

Процедура ВыполнитьПервичнуюРегистрацию(УзелЛКК)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЛКК_Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ЛКК_Организации КАК ЛКК_Организации
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЛКК_Представители.Ссылка
	               |ИЗ
	               |	Справочник.ЛКК_Представители КАК ЛКК_Представители
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЛКК_Номенклатура.Ссылка
	               |ИЗ
	               |	Справочник.ЛКК_Номенклатура КАК ЛКК_Номенклатура";
	
	ОбъектыДляРегистрации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Если Не ЗначениеЗаполнено(ОбъектыДляРегистрации) Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(УзелЛКК, ОбъектыДляРегистрации);
	
КонецПроцедуры

Процедура ЗаписатьЗагруженныеДанные(Данные, Отправитель, ВидЦены)
	
	НачатьТранзакцию();
	
	Попытка
	
		Если ТипЗнч(Данные) = Тип("ДокументОбъект.ЗаказПокупателя") Тогда
			ЗаписатьЗаказПокупателя(Данные, ВидЦены);
		Иначе
			Данные.ОбменДанными.Отправитель = Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			Данные.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаписатьЗаказПокупателя(ДокументОбъект, ВидЦены)
	
	// Общий алгоритм приведен для примера, для промышленной эксплуатации требуется доработка	
	ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.ЗаказНаПродажу;
	ДокументОбъект.Организация = Справочники.Организации.ОсновнаяОрганизация;
	ДокументОбъект.Договор = Справочники.ДоговорыКонтрагентов.ДоговорПоУмолчанию(ДокументОбъект.Контрагент);
	ДокументОбъект.НалогообложениеНДС = НалогиУНФ.НалогообложениеНДС(ДокументОбъект.Организация, , ДокументОбъект.Дата);
	
	ДокументОбъект.Заполнить(Неопределено);
	
	ДокументОбъект.ВалютаДокумента = Константы.ВалютаУчета.Получить();
	
	Отбор = Новый Структура("Валюта", ДокументОбъект.ВалютаДокумента);
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ТекущаяДатаСеанса(), Отбор);
	
	ДокументОбъект.Курс = СтруктураПоВалюте.Курс;
	ДокументОбъект.Кратность = СтруктураПоВалюте.Кратность;
	
	ДокументОбъект.ВидЦен = ВидЦены;
	Если ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ДокументОбъект.БанковскийСчет = ДокументОбъект.Организация.БанковскийСчетПоУмолчанию;
		ДокументОбъект.Касса = ДокументОбъект.Организация.КассаПоУмолчанию;
	КонецЕсли;
	
	ДокументОбъект.ДатаОтгрузки = ТекущаяДатаСеанса() + 86400 * 10;
	
	Для Каждого Строка Из ДокументОбъект.Запасы Цикл
		Строка.СтавкаНДС = Справочники.СтавкиНДС.СтавкаНДС(Строка.Номенклатура.ВидСтавкиНДС);
		Строка.ЕдиницаИзмерения = Строка.Номенклатура.ЕдиницаИзмерения;
		ПересчитатьСтрокуТабличнойЧасти(Строка, ДокументОбъект);
	КонецЦикла;
	
	Если Не ОбщегоНазначения.СсылкаСуществует(ДокументОбъект.Контрагент) Тогда
		ДокументОбъект.Контрагент = Неопределено;
	КонецЕсли;
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Запись = РегистрыСведений.ЛКК_ЗагруженныеЗаказы.СоздатьМенеджерЗаписи();
	Запись.Заказ = ДокументОбъект.Ссылка;
	Запись.Записать();
	
КонецПроцедуры

Процедура ПересчитатьСтрокуТабличнойЧасти(СтрокаТабличнойЧасти, Документ)
	
	Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена)
		И ЗначениеЗаполнено(Документ.ВидЦен) Тогда
		
		СтруктураДанные = Новый Структура;
		
		СтруктураДанные.Вставить("ДатаОбработки", Документ.Дата);
		СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		СтруктураДанные.Вставить("Характеристика", Неопределено);
		СтруктураДанные.Вставить("ВалютаДокумента", Документ.ВалютаДокумента);
		СтруктураДанные.Вставить("СуммаВключаетНДС", Документ.СуммаВключаетНДС);
		СтруктураДанные.Вставить("СтавкаНДС", СтрокаТабличнойЧасти.СтавкаНДС);
		СтруктураДанные.Вставить("ВидЦен", Документ.ВидЦен);
		СтруктураДанные.Вставить("Коэффициент", 1);
		СтруктураДанные.Вставить("ВидСкидкиНаценки", Документ.ВидСкидкиНаценки);

		ЦенообразованиеКлиентСервер.ДополнитьСтруктуруДанныхНоменклатурыПолямиЦенообразования(Документ, СтрокаТабличнойЧасти, СтруктураДанные);

		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Кратность * СтрокаТабличнойЧасти.Цена;
		
	КонецЕсли;
	
	СуммаБезСкидки = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	СуммаСкидки = СуммаБезСкидки - СтрокаТабличнойЧасти.Сумма;
	
	Если СуммаСкидки <> 0 Тогда
		СтрокаТабличнойЧасти.ПроцентСкидкиНаценки = 100 * СуммаСкидки / СуммаБезСкидки;
	КонецЕсли;
	
	РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ);
	
КонецПроцедуры

Процедура РассчитатьСуммуНДСЗаказа(СтрокаТабличнойЧасти, Документ)
	
	Если Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ОблагаетсяНДС Тогда
		
		СтавкаНДС = УправлениеНебольшойФирмойПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		
		СтрокаТабличнойЧасти.СуммаНДС = ?(Документ.СуммаВключаетНДС,
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	
КонецПроцедуры

Функция НастройкиПодключения()
	
	Адрес = Константы.ЛКК_АдресЛичногоКабинета.Получить();
	
	Результат = НовыеНастройкиПодключения();
	
	Если СтрНачинаетсяС(Адрес, "https") Тогда
		Результат.ЗащищенноеСоединение = ОбщегоНазначенияКлиентСервер.НовоеЗащищенноеСоединение()
	КонецЕсли;
	
	АдресБезПротокола = Сред(Адрес, СтрНайти(Адрес, "://") + 3);
	
	Результат.АдресСервера = Лев(АдресБезПротокола, СтрНайти(АдресБезПротокола, "/") - 1);
	Результат.ПутьНаСервере = Сред(АдресБезПротокола, СтрНайти(АдресБезПротокола, "/"));
	
	Возврат Результат;	
	
КонецФункции

// Новые настройки подключения.
// 
// Возвращаемое значение:
//  Структура - Новые настройки подключения:
// * АдресСервера - Строка
// * ПутьНаСервере - Строка
// * ЗащищенноеСоединение - Неопределено
// 
Функция НовыеНастройкиПодключения()
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервера", "");
	Результат.Вставить("ПутьНаСервере", "");
	Результат.Вставить("ЗащищенноеСоединение", Неопределено);
	
	Возврат Результат	
	
КонецФункции

// Новое соединение.
// 
// Параметры:
//  НастройкиПодключения - см. НовыеНастройкиПодключения
//  Логин - Строка
//  Пароль - Строка
// 
// Возвращаемое значение:
//  HTTPСоединение - Новое соединение с указанными настройками
Функция НовоеСоединение(НастройкиПодключения, Логин = "", Пароль = "")
	
	Возврат Новый HTTPСоединение(
		НастройкиПодключения.АдресСервера,,
		Логин, 
		Пароль,, 
		60, 
		НастройкиПодключения.ЗащищенноеСоединение);
	
КонецФункции

// Выполнить запрос GET.
// 
// Параметры:
//  Соединение - HTTPСоединение - Соединение
//  НастройкиПодключения - см. НовыеНастройкиПодключения
//  ДополнительныйПуть - Строка
//  ТребуетсяАутентификация - Булево - Требуется аутентификация
// 
// Возвращаемое значение:
//  HTTPОтвет - Ответ сервера
Функция ВыполнитьЗапросGET(ДополнительныйПуть, ТребуетсяАутентификация = Истина)
	
	НастройкиПодключения = НастройкиПодключения();	
	Соединение = НовоеСоединение(НастройкиПодключения);
	
	ШаблонАдреса = "%1/api/sbm/%2";
	Адрес = СтрШаблон(ШаблонАдреса, НастройкиПодключения.ПутьНаСервере, ДополнительныйПуть);
	
	Токен = Токен(НастройкиПодключения);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);
	
	Возврат Соединение.Получить(Запрос);
	
КонецФункции

// Выполнить запрос POST.
// 
// Параметры:
//  Соединение - HTTPСоединение - Соединение
//  НастройкиПодключения - см. НовыеНастройкиПодключения
//  ДополнительныйПуть - Строка
//  Тело - Строка
// 
// Возвращаемое значение:
//  HTTPОтвет - Ответ сервера
Функция ВыполнитьЗапросPOST(ДополнительныйПуть, Тело)
	
	НастройкиПодключения = НастройкиПодключения();	
	Соединение = НовоеСоединение(НастройкиПодключения);
	
	ШаблонАдреса = "%1/api/sbm/%2";
	Адрес = СтрШаблон(ШаблонАдреса, НастройкиПодключения.ПутьНаСервере, ДополнительныйПуть);
	
	Токен = Токен(НастройкиПодключения);
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Authorization", СтрШаблон("Bearer %1", Токен));
	
	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Запрос.УстановитьТелоИзСтроки(Тело);
	
	Возврат Соединение.ВызватьHTTPМетод("POST", Запрос);
	
КонецФункции

Функция Токен(НастройкиПодключения)
	
	ШаблонАдреса = "%1/sys/token";
	Адрес = СтрШаблон(ШаблонАдреса, НастройкиПодключения.ПутьНаСервере);
	
	Логин = Константы.ЛКК_ИдентификаторСлужебногоПользователя.Получить();
	Пароль = Константы.ЛКК_СекретСлужебногоПользователя.Получить();
	
	Соединение = НовоеСоединение(НастройкиПодключения, Логин, Пароль);
	
	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/x-www-form-urlencoded");
	
	ТелоЗапроса = "grant_type=CLIENT_CREDENTIALS";
	
	Запрос = Новый HTTPЗапрос(Адрес, Заголовки);
	Запрос.УстановитьТелоИзСтроки(ТелоЗапроса);
	
	Ответ = Соединение.ВызватьHTTPМетод("POST", Запрос);
	
	Если Ответ.КодСостояния <> 200 Тогда
		ВызватьИсключение СтрШаблон("Ошибка получения токена, код состояния: %1", Ответ.КодСостояния)
	КонецЕсли;
			
	ДанныеОтвета = ПрочитатьЗначениеJSON(Ответ.ПолучитьТелоКакСтроку());
	
	Возврат ДанныеОтвета.id_token;
	
КонецФункции

#КонецОбласти